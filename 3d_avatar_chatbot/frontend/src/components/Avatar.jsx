/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/64f1a714fe61576b46f27ca2.glb -o src/components/Avatar.jsx -k -r public
*/
import { CameraControls, ContactShadows, Environment } from "@react-three/drei";
import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import React, { Suspense, useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { Dots } from "./Dots";
import {
  FACIAL_EXPRESSIONS,
  MAP_MESSAGE_CUES_TO_AVATAR_MESH,
} from "../constants/avatar";
import { lerpMorphTarget } from "../utils/morph";

let setupMode = false;

export function Avatar(props) {
  const { nodes, materials, scene } = useGLTF(
    "/models/64f1a714fe61576b46f27ca2.glb"
  );
  const { messages, removeFirstMessage, isLoading, ...rest } = props;

  const newAudioStartTime = useRef(0);
  const [lipsync, setLipsync] = useState();
  const [speaking, setSpeaking] = useState(false);
  const [blink, setBlink] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [facialExpression, setFacialExpression] = useState("");
  const { animations } = useGLTF("/models/animations.glb");

  const group = useRef();
  const { actions, mixer } = useAnimations(animations, group);
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === "Idle") ? "Idle" : animations[0].name // Check if Idle animation exists otherwise use first animation
  );
  const cameraControls = useRef();

  useEffect(() => {
    cameraControls.current.setLookAt(0, 1.5, 1.5, 0, 1.5, 0);
  }, []);

  useEffect(() => {
    if (!speaking) {
      setAnimation("Idle");
      setFacialExpression("default");
    }
  }, [speaking]);

  useEffect(() => {
    if (messages.length > 0) {
      if (messages[0]?.animation) {
        setAnimation(messages[0].animation);
      }
      if (messages[0]?.facialExpression) {
        setFacialExpression(messages[0].facialExpression);
      }
      if (messages[0]?.mouthCues) {
        setLipsync(messages[0].mouthCues);
      }

      newAudioStartTime.current = new Date().getTime() / 1000;
      removeFirstMessage();
    }
  }, [messages]);

  useEffect(() => {
    actions[animation]
      .reset()
      .fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5)
      .play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  useFrame(() => {
    !setupMode &&
      nodes?.EyeLeft?.morphTargetDictionary &&
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        const mapping = FACIAL_EXPRESSIONS[facialExpression];
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return; // eyes wink/blink are handled separately
        }
        if (mapping && mapping[key]) {
          lerpMorphTarget(scene, key, mapping[key], 0.1);
        } else {
          lerpMorphTarget(scene, key, 0, 0.1);
        }
      });

    lerpMorphTarget(scene, "eyeBlinkLeft", blink || winkLeft ? 1 : 0, 0.5);
    lerpMorphTarget(scene, "eyeBlinkRight", blink || winkRight ? 1 : 0, 0.5);

    // LIPSYNC
    if (setupMode) {
      return;
    }

    const appliedMorphTargets = [];

    if (lipsync && newAudioStartTime.current) {
      setSpeaking(true);
      const currentAudioTime =
        new Date().getTime() / 1000 - newAudioStartTime.current;

      if (currentAudioTime < 0.0) {
        return;
      }
      let i = 0;
      for (i = 0; i < lipsync.length; i++) {
        const mouthCue = lipsync[i];
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime < mouthCue.end
        ) {
          appliedMorphTargets.push(
            MAP_MESSAGE_CUES_TO_AVATAR_MESH[mouthCue.value]
          );
          lerpMorphTarget(
            scene,
            MAP_MESSAGE_CUES_TO_AVATAR_MESH[mouthCue.value],
            1,
            0.2
          );
          break;
        }
      }
      if (i === lipsync.length) {
        setSpeaking(false);
      }
    } else if (speaking) {
      console.log("no lipsync; setting speaking to false");
      setSpeaking(false);
    }
    Object.values(MAP_MESSAGE_CUES_TO_AVATAR_MESH).forEach((value) => {
      if (appliedMorphTargets.includes(value)) {
        return;
      }
      lerpMorphTarget(scene, value, 0, 0.1);
    });
  });

  useEffect(() => {
    let blinkTimeout;
    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          nextBlink();
        }, 200);
      }, THREE.MathUtils.randInt(1000, 5000));
    };
    nextBlink();
    return () => clearTimeout(blinkTimeout);
  }, []);

  return (
    <>
      <CameraControls ref={cameraControls} />
      <Environment preset="sunset" />
      {/* Wrapping Dots into Suspense to prevent Blink when Troika/Font is loaded */}
      <Suspense>
        <Dots loading={isLoading} position-y={1.75} position-x={-0.02} />
      </Suspense>
      <group {...rest} dispose={null} ref={group}>
        <primitive object={nodes.Hips} />
        <skinnedMesh
          name="Wolf3D_Body"
          geometry={nodes.Wolf3D_Body.geometry}
          material={materials.Wolf3D_Body}
          skeleton={nodes.Wolf3D_Body.skeleton}
        />
        <skinnedMesh
          name="Wolf3D_Outfit_Bottom"
          geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
          material={materials.Wolf3D_Outfit_Bottom}
          skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        />
        <skinnedMesh
          name="Wolf3D_Outfit_Footwear"
          geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
          material={materials.Wolf3D_Outfit_Footwear}
          skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        />
        <skinnedMesh
          name="Wolf3D_Outfit_Top"
          geometry={nodes.Wolf3D_Outfit_Top.geometry}
          material={materials.Wolf3D_Outfit_Top}
          skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        />
        <skinnedMesh
          name="Wolf3D_Hair"
          geometry={nodes.Wolf3D_Hair.geometry}
          material={materials.Wolf3D_Hair}
          skeleton={nodes.Wolf3D_Hair.skeleton}
        />
        <skinnedMesh
          name="EyeLeft"
          geometry={nodes.EyeLeft.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeLeft.skeleton}
          morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        />
        <skinnedMesh
          name="EyeRight"
          geometry={nodes.EyeRight.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeRight.skeleton}
          morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Head"
          geometry={nodes.Wolf3D_Head.geometry}
          material={materials.Wolf3D_Skin}
          skeleton={nodes.Wolf3D_Head.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Teeth"
          geometry={nodes.Wolf3D_Teeth.geometry}
          material={materials.Wolf3D_Teeth}
          skeleton={nodes.Wolf3D_Teeth.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        />
      </group>
      <ContactShadows opacity={0.7} />
    </>
  );
}

useGLTF.preload("/models/64f1a714fe61576b46f27ca2.glb");
useGLTF.preload("/models/animations.glb");
